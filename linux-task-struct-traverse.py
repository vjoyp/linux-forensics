{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import struct\n",
    "from ctypes import *\n",
    "\n",
    "# Define constants\n",
    "INIT_TASK_SYMBOL = \"init_task\"\n",
    "COMM_OFFSET = 0x1A4  # Offset for process name in task_struct (may vary by kernel version)\n",
    "NEXT_TASK_OFFSET = 0x188  # Offset for next pointer in the doubly linked list\n",
    "\n",
    "# Define a function to read kernel memory\n",
    "def read_kernel_memory(address, size):\n",
    "    try:\n",
    "        with open(\"/dev/kmem\", \"rb\") as f:\n",
    "            f.seek(address)\n",
    "            return f.read(size)\n",
    "    except Exception as e:\n",
    "        print(f\"Error reading kernel memory: {e}\")\n",
    "        return None\n",
    "\n",
    "# Locate the init_task symbol address using the system's symbol table\n",
    "def get_symbol_address(symbol):\n",
    "    try:\n",
    "        with open(\"/proc/kallsyms\", \"r\") as f:\n",
    "            for line in f:\n",
    "                if symbol in line:\n",
    "                    return int(line.split()[0], 16)\n",
    "    except Exception as e:\n",
    "        print(f\"Error finding symbol {symbol}: {e}\")\n",
    "    return None\n",
    "\n",
    "# Function to extract process name from a task_struct\n",
    "def get_process_name(task_address):\n",
    "    data = read_kernel_memory(task_address + COMM_OFFSET, 16)  # Process name is 16 bytes\n",
    "    if data:\n",
    "        return data.decode(\"utf-8\", errors=\"ignore\").strip('\\x00')\n",
    "    return \"Unknown\"\n",
    "\n",
    "# Traverse the task_struct doubly linked list\n",
    "def traverse_task_structs(init_task_address):\n",
    "    visited = set()\n",
    "    current_task_address = init_task_address\n",
    "\n",
    "    while True:\n",
    "        if current_task_address in visited:\n",
    "            break\n",
    "\n",
    "        visited.add(current_task_address)\n",
    "\n",
    "        process_name = get_process_name(current_task_address)\n",
    "        print(f\"Process Name: {process_name}, Address: {hex(current_task_address)}\")\n",
    "\n",
    "        # Read the pointer to the next task_struct\n",
    "        next_task_pointer = read_kernel_memory(current_task_address + NEXT_TASK_OFFSET, 8)\n",
    "        if next_task_pointer:\n",
    "            next_task_address = struct.unpack(\"Q\", next_task_pointer)[0]\n",
    "            if next_task_address == init_task_address:\n",
    "                break  # Reached back to init_task\n",
    "            current_task_address = next_task_address\n",
    "        else:\n",
    "            print(\"Error reading next task pointer\")\n",
    "            break\n",
    "\n",
    "# Main execution\n",
    "if __name__ == \"__main__\":\n",
    "    if os.geteuid() != 0:\n",
    "        print(\"This script must be run as root.\")\n",
    "        exit(1)\n",
    "\n",
    "    init_task_address = get_symbol_address(INIT_TASK_SYMBOL)\n",
    "    if not init_task_address:\n",
    "        print(f\"Failed to locate {INIT_TASK_SYMBOL} in the symbol table.\")\n",
    "        exit(1)\n",
    "\n",
    "    print(f\"init_task found at: {hex(init_task_address)}\")\n",
    "    traverse_task_structs(init_task_address)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
